#include <iostream>
#include <stack>
#include <string>

using namespace std;

int precedence(char op) {
    if (op == '+' || op == '-')
        return 1;
    else if (op == '*' || op == '/')
        return 2;
    else if (op == '^')
        return 3;
    return 0;
}

string infixToPrefix(string expression) {
    string prefix;
    stack<char> operators;

    for (int i = expression.length() - 1; i >= 0; i--) {
        char ch = expression[i];
        if (isalpha(ch) || isdigit(ch)) {
            prefix = ch + prefix;
        } else if (ch == ')') {
            operators.push(ch);
        } else if (ch == '(') {
            while (!operators.empty() && operators.top() != ')') {
                prefix = operators.top() + prefix;
                operators.pop();
            }
            if (!operators.empty())
                operators.pop();
        } else {
            while (!operators.empty() && precedence(operators.top()) > precedence(ch)) {
                prefix = operators.top() + prefix;
                operators.pop();
            }
            operators.push(ch);
        }
    }

    while (!operators.empty()) {
        prefix = operators.top() + prefix;
        operators.pop();
    }

    return prefix;
}

string infixToPostfix(string expression) {
    string postfix;
    stack<char> operators;

    for (char ch : expression) {
        if (isalpha(ch) || isdigit(ch)) {
            postfix += ch;
        } else if (ch == '(') {
            operators.push(ch);
        } else if (ch == ')') {
            while (!operators.empty() && operators.top() != '(') {
                postfix += operators.top();
                operators.pop();
            }
            if (!operators.empty())
                operators.pop();
        } else {
            while (!operators.empty() && precedence(operators.top()) >= precedence(ch)) {
                postfix += operators.top();
                operators.pop();
            }
            operators.push(ch);
        }
    }

    while (!operators.empty()) {
        postfix += operators.top();
        operators.pop();
    }

    return postfix;
}

int main() {
    string expression;
    cout << "Enter the infix expression: ";
    cin >> expression;

    string prefix = infixToPrefix(expression);
    string postfix = infixToPostfix(expression);

    cout << "Prefix: " << prefix << endl;
    cout << "Postfix: " << postfix << endl;

    return 0;
}


//output: 
Enter the infix expression: A+B^C/R
Prefix: +A/^BCR
Postfix: ABC^R/+
